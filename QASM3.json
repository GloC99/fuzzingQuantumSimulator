{
    "program": [
        ["OPENQASM 3.0;\n", "include \"stdgates.inc\";\n", "<registerDeclarationStatement>", "\n", "<statementsOrScopes>", "\n", "<gateCallStatement>"]
    ],
    "<statementsOrScopes>": [["<statementOrScope>"], ["<statementOrScope>", "\n", "<statementsOrScopes>"]],
    "<statementOrScope>": [["<statement>"], ["<scope>"]],
    "<statement>": [["<specificStatement>"]],
    "<scope>": [["{\n", "<statementsOrScopes>", "\n}"]],
    "<specificStatement>": [
        ["<aliasDeclarationStatement>"],
        ["<assignmentStatement>"],
        ["<barrierStatement>"],
        ["<boxStatement>"],
        ["break;"],
        ["<classicalDeclarationStatement>"],
        ["continue;"],
        ["<delayStatement>"],
        ["<forStatement>"],
        ["<gateCallStatement>"],
        ["<gateStatement>"],
        ["<ifStatement>"],
        ["<measureArrowAssignmentStatement>"],
        ["<oldStyleDeclarationStatement>"],
        ["<quantumDeclarationStatement>"],
        ["<returnStatement>"],
        ["<switchStatement>"],
        ["<whileStatement>"]
    ],
    "<forStatement>": [
        ["for int ", "<LoopVarIdentifier>", " in ", "<setExpression>", " ", "<statementOrScope>"],
        ["for int ", "<LoopVarIdentifier>", " in [", "<rangeExpression>", "] ", "<statementOrScope>"],
        ["for int ", "<LoopVarIdentifier>", " in ", "<expression>", " ", "<statementOrScope>"]
    ],
    "<ifStatement>": [
        ["if (", "<Conditional>", ") ", "<statementOrScope>"],
        ["if (", "<Conditional>", ") ", "<statementOrScope>", " else ", "<statementOrScope>"]
    ],
    "<returnStatement>": [
        ["return;"],
        ["return ", "<expression>", ";"],
        ["return ", "<measureExpression>", ";"]
    ],
    "<whileStatement>": [["while (", "<Conditional>", ")", "<statementOrScope>"]],
    "<switchStatement>": [
        ["switch (", "<expression>", ") {\n", "<switchCaseItems>", "}"],
        ["switch (", "<expression>", ") { }"]
    ],
    "<switchCaseItems>": [
        ["<switchCaseItem>", "<switchCaseItems>"],
        ["<switchCaseItem>"]
    ],
    "<switchCaseItem>": [
        ["case ", "<expressionList>", " ", "<scope>"],
        ["default ", "<scope>"]
    ],
    "<barrierStatement>": [
        ["barrier;"],
        ["barrier ", "<gateOperandList>", ";"]
    ],
    "<boxStatement>": [
        ["box ", "<designator>", " ", "<scope>"],
        ["box ", "<scope>"]
    ],
    "<delayStatement>": [
        ["delay", "<designator>", " ", "<gateOperandList>", ";"],
        ["delay", "<designator>", ";"]
    ],
    "<gateCallStatement>": [
        ["<gateModifiers>", "<gateCallInner1>"],
        ["<gateCallInner1>"]
    ],
    "<gateCallInner1>": [
        ["<AnyGateIdentifier>", "<gateCallInnerIdentifier>"],
        ["gphase", "<gateCallInnerGphase>"]
    ],
    "<gateCallInnerIdentifier>": [
        ["(", "<expressionList>", ") ", "<gateOperandList>", ";"],
        ["<designator>", " ", "<gateOperandList>", ";"],
        [" ", "<gateOperandList>", ";"]
    ],
    "<gateCallInnerGphase>": [
        ["() ", "<gateOperandList>", ";"],
        ["(", "<expressionList>", ") ", "<gateOperandList>", ";"],
        ["();"],
        ["(", "<expressionList>", ");"]
    ],
    "<gateCallInner2>": [
        ["()"],
        ["(", "<expressionList>", ")"],
        ["<designator>"]
    ],
    "<measureArrowAssignmentStatement>": [
        ["<measureExpression>", ";"],
        ["<measureExpression>", "->", "<indexedIdentifier>", ";"]
    ],
    "<aliasDeclarationStatement>": [["let ", "<AnyIdentifier>", " = ", "<aliasExpression>", ";"]],
    "<registerDeclarationStatement>": [
        ["<classicalDeclarationStatement>"],
        ["<oldStyleDeclarationStatement>"],
        ["<quantumDeclarationStatement>"]
    ],
    "<classicalDeclarationStatement>": [
        ["<scalarType>", " ", "<RegisterIdentifier>", ";"],
        ["<scalarType>", " ", "<RegisterIdentifier>", " = ", "<declarationExpression>", ";"]
    ],
    "<oldStyleDeclarationStatement>": [
        ["creg ", "<RegisterIdentifier>", "<designator>", ";"],
        ["creg ", "<RegisterIdentifier>", ";"],
        ["qreg ", "<RegisterIdentifier>", "<designator>", ";"],
        ["qreg ", "<RegisterIdentifier>", ";"]
    ],
    "<quantumDeclarationStatement>": [["<qubitType>", " ", "<RegisterIdentifier>", ";"]],
    "<gateStatement>": [
        ["gate ", "<AnyGateIdentifier>", "(", "<gateParamsList>", ") ", "<gateArgsList>", " ", "<scope>"],
        ["gate ", "<AnyGateIdentifier>", "() ", "<gateArgsList>", " ", "<scope>"],
        ["gate ", "<AnyGateIdentifier>", " ", "<gateArgsList>", " ", "<scope>"]
    ],
    "<assignmentStatement>": [
        ["<indexedIdentifier>", " = ", "<expression>", ";"],
        ["<indexedIdentifier>", " = ", "<measureExpression>", ";"],
        ["<indexedIdentifier>", " ", "<CompoundAssignmentOperator>", " ", "<expression>", ";"],
        ["<indexedIdentifier>", " ", "<CompoundAssignmentOperator>", " ", "<measureExpression>", ";"]
    ],
    "<expression>": [
        ["(", "<expression>", ")"],
        ["<expression>", "<indexOperator>"],
        ["~", "<expression>"],
        ["!", "<expression>"],
        ["-", "<expression>"],
        ["<expression>", "<BinaryOp>", "<expression>"],
        ["<scalarType>", "(", "<expression>", ")"],
        ["<AnyIdentifier>"],
        ["<DecimalIntegerLiteral>"],
        ["<FloatLiteral>"],
        ["<BooleanLiteral>"],
        ["<BitstringLiteral>"],
        ["<TimingLiteral>"],
        ["<HardwareQubit>"]
    ],
    "<BinaryOp>": [
        [" * "], [" / "], [" % "], [" + "], [" - "], [" << "], [" >> "],
        ["<ComparisonOp>"],
        [" & "], [" | "], [" && "], [" || "]
    ],
    "<Conditional>": [
        ["<expression>"],
        ["!", "<expression>"],
        ["<expression>", "<ComparisonOp>", "<expression>"]
    ],
    "<ComparisonOp>": [
        [" < "], [" > "], [" <= "], [" >= "], [" == "], [" != "]
    ],
    "<aliasExpression>": [
        ["<expression>"],
        ["<expression>", " ++ ", "<aliasExpression>"]
    ],
    "<declarationExpression>": [
        ["<arrayLiteral>"], ["<expression>"], ["<measureExpression>"]
    ],
    "<measureExpression>": [["measure ", "<gateOperand>"]],
    "<rangeExpression>": [
        ["<expression>", ":", "<expression>", ":", "<expression>"],
        ["<expression>", ":", "<expression>"],
        ["<expression>", ":"],
        [":", "<expression>"]
    ],
    "<setExpression>": [
        ["{ ", "<expressions>", ",}"],
        ["{ ", "<expressions>", "}"],
        ["{,}"],
        ["{}"]
    ],
    "<expressions>": [["<expression>", ", ", "<expressions>"], ["<expression>"]],
    "<arrayLiteral>": [
        ["{", "<expression>", "<arrayLiteralInner>", ",}"],
        ["{", "<expression>", "<arrayLiteralInner>", "}"],
        ["{", "<arrayLiteral>", "<arrayLiteralInner>", ",}"],
        ["{", "<arrayLiteral>", "<arrayLiteralInner>", "}"],
        ["{", "<expression>", ",}"],
        ["{", "<expression>", "}"],
        ["{", "<arrayLiteral>", ",}"],
        ["{", "<arrayLiteral>", "}"]
    ],
    "<arrayLiteralInner>": [
        [", ", "<expression>", "<arrayLiteralInner>"],
        [", ", "<arrayLiteral>", "<arrayLiteralInner>"],
        [", ", "<expression>"],
        [", ", "<arrayLiteral>"]
    ],
    "<indexOperator>": [
        ["[", "<setExpression>", "]"],
        ["[", "<expression>", "<indexOperatorInner>", "]"],
        ["[", "<setExpression>", "]"]
    ],
    "<indexOperatorInner>": [
        [", ", "<expression>", "<indexOperatorInner>"],
        [", ", "<rangeExpression>", "<indexOperatorInner>"],
        [", ", "<expression>"],
        [", ", "<rangeExpression>"]
    ],
    "<indexedIdentifier>": [["<RegisterIdentifier>", "<indexOperators>"], ["<RegisterIdentifier>"]],
    "<indexOperators>": [["<indexOperator>", "<indexOperators>"], ["<indexOperator>"]],
    "<returnSignature>": [[" -> ", "<scalarType>"]],
    "<gateModifiers>": [["<gateModifier>", "<gateModifiers>"], ["<gateModifier>"]],
    "<gateModifier>": [
        ["inv @ "],
        ["pow(", "<expression>", ") @ "],
        ["ctrl ", "(", "<expression>", ") @ "],
        ["negctrl ", "(", "<expression>", ") @ "]
    ],
    "<scalarType>": [
        ["bit", "<designator>"],
        ["bit"]
    ],
    "<qubitType>": [["qubit", "<designator>"], ["qubit"]],
    "<arrayReferenceType>": [
        ["readonly array [", "<scalarType>", ", ", "<expressionList>", "]"],
        ["readonly array [", "<scalarType>", ", ", "#dim = ", "<expression>", "]"],
        ["mutable array [", "<scalarType>", ", ", "<expressionList>", "]"],
        ["mutable array [", "<scalarType>", ", ", "#dim = ", "<expression>", "]"]
    ],
    "<designator>": [["[", "<expression>", "]"]],
    "<gateOperand>": [["<indexedIdentifier>"], ["<HardwareQubit>"]],
    "<expressionList>": [
        ["<expression>", "<exprListInner>", ","],
        ["<expression>", "<exprListInner>"],
        ["<expression>", ","],
        ["<expression>"]
    ],
    "<exprListInner>": [
        [", ", "<expression>", "<exprListInner>"],
        [", ", "<expression>"]
    ],
    "<identifierList>": [
        ["<AnyIdentifier>", "<idListInner>", ","],
        ["<AnyIdentifier>", "<idListInner>"],
        ["<AnyIdentifier>", ","],
        ["<AnyIdentifier>"]
    ],
    "<idListInner>": [
        [", ", "<AnyIdentifier>", "<idListInner>"],
        [", ", "<AnyIdentifier>"]
    ],
    "<gateArgsList>": [
        ["<GateArgIdentifier>", "<gateArgListInner>", ","],
        ["<GateArgIdentifier>", "<gateArgListInner>"],
        ["<GateArgIdentifier>", ","],
        ["<GateArgIdentifier>"]
    ],
    "<gateArgListInner>": [
        [", ", "<GateArgIdentifier>", "<gateArgListInner>"],
        [", ", "<GateArgIdentifier>"]
    ],
    "<gateParamsList>": [
        ["<GateParamIdentifier>", "<gateParamsListInner>", ","],
        ["<GateParamIdentifier>", "<gateParamsListInner>"],
        ["<GateParamIdentifier>", ","],
        ["<GateParamIdentifier>"]
    ],
    "<gateParamsListInner>": [
        [", ", "<GateParamIdentifier>", "<gateParamsListInner>"],
        [", ", "<GateParamIdentifier>"]
    ],
    "<gateOperandList>": [
        ["<gateOperand>", "<gateOpInner>"],
        ["<gateOperand>"]
    ],
    "<gateOpInner>": [
        [", ", "<gateOperand>", "<gateOpInner>"],
        [", ", "<gateOperand>"]
    ],
    "<BooleanLiteral>": [["true"], ["false"]],
    "<CompoundAssignmentOperator>": [
        ["+="], ["-="], ["*="], ["/="], ["&="], ["~="], ["^="], ["<<="], [">>="]
    ],
    "<BinaryInner>": [
        ["<BinDigit>", "<BinaryInner>"],
        ["<BinDigit>"]
    ],
    "<BinDigit>": [["0"], ["1"]],
    "<DecimalIntegerLiteral>": [
        ["0"], ["1"], ["2"], ["3"], ["4"], ["5"], ["6"], ["7"], ["8"], ["9"], ["10"], ["11"], ["12"], ["13"], ["14"], ["15"], ["16"], ["17"], ["18"], ["19"], ["20"], ["21"], ["22"], ["23"], ["24"], ["25"], ["26"], ["27"], ["28"], ["32"], ["64"], ["128"], ["256"], ["512"], ["255"], ["32767"], ["65535"], ["100663045"], ["2139095040"], ["2147483647"]
    ],
    "<AnyIdentifier>": [
        ["<AnyGateIdentifier>"],
        ["<RegisterIdentifier>"],
        ["pi"]
    ],
    "<AnyGateIdentifier>": [
        ["<StdGateIdentifier>"],
        ["<GateParamIdentifier>"],
        ["<GateArgIdentifier>"],
        ["<NewGateIdentifier>"]
    ],
    "<StdGateIdentifier>": [
        ["x"], ["y"], ["z"],
        ["h"], ["s"], ["sdg"], ["sx"],
        ["rx"], ["ry"], ["rz"],
        ["cx"], ["cy"], ["cz"],
        ["cp"], ["crx"], ["cry"], ["crz"], ["ch"],
        ["swap"], ["ccx"], ["cswap"], ["cu"],
        ["CX"], ["phase"], ["cphase"], ["id"], ["u1"], ["u2"], ["u3"]
    ],
    "<NewGateIdentifier>": [
        ["g1"]
    ],
    "<GateParamIdentifier>": [
        ["theta"], ["thi"], ["gamma"], ["lambda"]
    ],
    "<GateArgIdentifier>": [
        ["a"], ["b"], ["c"], ["d"]
    ],
    "<RegisterIdentifier>": [
        ["r1"], ["r2"]
    ],
    "<LoopVarIdentifier>": [
        ["lv1"]
    ],
    "<HardwareQubit>": [["$", "<DecimalIntegerLiteral>"]],
    "<FloatLiteral>": [
        ["<DecimalIntegerLiteral>", ".", "<DecimalIntegerLiteral>", "<FloatLiteralExponent>"],
        ["0.0283940325132045"], ["0.0562610521523687"], ["0.090315771"], ["0.110276567223963"],
        ["0.18126868294831"], ["0.183411690555527"], ["0.23204662"], ["0.26055497"], ["0.274611561179047"],
        ["0.302276903187072"], ["0.304006861589844"], ["0.323124183787948"], ["0.34339104765177"],
        ["0.364770216832646"], ["0.386088099025332"], ["0.390289925461651"], ["0.43708748495407"],
        ["0.44724576"], ["0.465631192720672"], ["0.470432739067156"], ["0.488259748297606"],
        ["0.531560524522875"], ["0.541191586579538"], ["0.565080720693427"], ["0.583444395859387"],
        ["0.639992284554905"], ["0.644936496959995"], ["0.652213947544824"], ["0.658834133255635"],
        ["0.682154452208615"], ["0.695489997173783"], ["0.704501496809573"], ["0.720781382238064"],
        ["0.74535560401605"], ["0.766417482119969"], ["0.768356031305776"], ["0.768714933309941"],
        ["0.77792289763104"], ["0.817874127320297"], ["0.819729663880418"], ["0.877307855501848"],
        ["0.917540997684541"], ["0.92729522"], ["0.930988499844055"], ["0.941314187016362"], ["0.941685991932291"],
        ["0.952796311794947"], ["0.960824079481623"], ["0.962337066287826"], ["0.988315801149533"], ["1.0"],
        ["1.09267111867709"], ["1.16893331500669"], ["1.2377669"], ["1.28315816917591"], ["1.3343007"],
        ["1.3900562"], ["1.46213217253153"], ["1.5619683"], ["1.85578983194329"], ["1.986944517459"], ["2.2086037"],
        ["2.28643189871332"], ["2.28793740781859"], ["2.32308793116108"], ["2.4135628694577"], ["2.6422546"],
        ["2.7702916"], ["2.8078072"], ["2.8605548"], ["2.8970973"], ["2.9973442"], ["3.0"], ["3.0295952"],
        ["3.1378258"], ["4.43809726294417"], ["4.54167162188708"]
    ],
    "<FloatLiteralExponent>": [
        ["e", "<DecimalIntegerLiteral>"],
        ["e+", "<DecimalIntegerLiteral>"],
        ["e-", "<DecimalIntegerLiteral>"]
    ],
    "<TimeUnit>": [
        ["dt"], ["ns"], ["us"], ["ms"], ["s"]
    ],
    "<TimingLiteral>": [
        ["<DecimalIntegerLiteral>", " ", "<TimeUnit>"],
        ["<FloatLiteral>", " ", "<TimeUnit>"]
    ],
    "<BitstringLiteral>": [
        ["\"", "<BinaryInner>", "<BinDigit>", "\""]
    ]
}
